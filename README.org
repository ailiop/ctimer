* CTimer: C/C++ timer utilities

*** Overview

CTimer is an include-only header library of C/C++ timer utilities.  CTimer uses
the [[https://man7.org/linux/man-pages/man3/clock_gettime.3.html][POSIX clock_gettime()]] function with a =CLOCK_MONOTONIC= clock to get
relative time stamps.

**** Stopwatch utilities

- ~ctimer_t~         : type of CTimer stopwatch struct
- ~ctimer_start()~   : start stopwatch
- ~ctimer_stop()~    : stop stopwatch
- ~ctimer_reset()~   : reset elapsed time
- ~ctimer_measure()~ : measure elapsed time between start & stop
- ~ctimer_lap()~     : accumulate elapsed time between start & stop
- ~ctimer_print()~   : print elapsed time in sec with fixed format

**** Timespec struct utilities

- ~timespec_sub()~   : calculate difference between 2 timespecs
- ~timespec_add()~   : calculate sum of 2 timespecs
- ~timespec_sec()~   : timespec tv time in sec (double)
- ~timespec_msec()~  : timespec tv time in msec (long)
- ~timespec_usec()~  : timespec tv time in usec (long)
- ~timespec_nsec()~  : timespec tv time in nsec (long)

*** How to use

Simply include =ctimer.h= in your source code and use the CTimer stopwatch
API.

**** Compilation and linking

With most modern C/C++ compilers, you do not need to do anything beyond
including =ctimer.h=

Some C compilers may require the standard =-std=gnu99= (or later) in order to
use ~clock_gettime()~.  Old C compilers may also require linking with =-lrt=.

**** The ~ctimer_t~ stopwatch

The stopwatch API works with ~ctimer_t~ structs, referred to as stopwatches,
which keep track of three timespecs:

1. a start-time (~start~),
2. an stop-time (~end~), and
3. an elapsed or accumulated duration (~elapsed~).

**** Starting, stopping, and measuring a ~ctimer_t~ stopwatch

The =start= and =end= times of a ~ctimer_t~ stopwatch are set with functions
~ctimer_start()~ and ~ctimer_stop()~, respectively.

Measuring and/or accumulating the =elapsed= time interval of a ~ctimer_t~
stopwatch is separate from setting its =start= and =end= times.  The =elapsed=
time of a stopwatch is only updated with the ~ctimer_measure()~ and
~ctimer_lap()~ functions.

- ~ctimer_measure()~ sets the =elapsed= time to be /equal/ to the duration
  between =start= and =end=.
- ~ctimer_lap()~ /adds/ the =start=-to-=end= duration to the =elapsed= time.

*Note:* If the preprocessor macro =CTIMER_MEASURE_ON_STOP= is defined /before/
including =ctimer.h=, then calling ~ctimer_stop()~ will also call
~ctimer_measure()~ internally.

**** Avoid uninitialized measurements

There are no guarantees regarding the initial values of timespec fields in a
~ctimer_t~ stopwatch.  Querying timespecs that haven't been initialized or
measured may return arbitrary results; this includes calling ~ctimer_measure()~
with an unstopped (or un-started) stopwatch.

The ~ctimer_reset()~ function resets the elapsed time of a ~ctimer_t~ stopwatch
to 0.  This must be done before using ~ctimer_lap()~ with an otherwise
un-measured stopwatch.

*** Documentation

To build the CTimer documentation with [[https://www.doxygen.nl/][Doxygen]], run:

#+begin_src shell-session
$ doxygen doxygen.config
#+end_src

This will create a =doc/= subdirectory with the documentation in HTML and LaTeX
format.

*** Example

#+begin_src C
#include <stdio.h>
#include <unistd.h>

#include "ctimer.h"

int main() {
    ctimer_t t_total;
    ctimer_t t_body;

    ctimer_start(&t_total);
    ctimer_reset(&t_body);

    for (int i = 0; i < 5; ++i) {
        ctimer_start(&t_body);

        sleep(1);

        ctimer_stop(&t_body);
        ctimer_lap(&t_body);
        printf("Done with iteration #%d\n", i);
    }

    ctimer_stop(&t_total);
    ctimer_measure(&t_total);

    printf("\n");
    ctimer_print(t_total, "total");
    ctimer_print(t_body, "loop body");
    return 0;
}
#+end_src
